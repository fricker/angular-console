import { Component, ChangeDetectionStrategy, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { TaskCollections } from '@angular-console/ui';
import { Observable, ReplaySubject, combineLatest, Subscription } from 'rxjs';
import {
  map,
  filter,
  startWith,
  distinctUntilChanged
} from 'rxjs/operators';
import { ProjectMetadata } from '../project/metadata/project-metadata';
import { ProjectMetadataService } from '../project/metadata/project-metadata.service';
import { ResourceTasks, ResourceTarget } from '../resource/resource-tasks';

@Component({
  changeDetection: ChangeDetectionStrategy.OnPush,
  selector: 'mbd-resources',
  templateUrl: './resources.component.html',
  styleUrls: ['./resources.component.scss']
})
export class ResourcesComponent implements OnInit, OnDestroy {

  private readonly selectedResource$: Observable<ResourceTarget> = this.router.events.pipe(
    filter(event => event instanceof NavigationEnd),
    startWith(null),
    map(() => {
      const firstChild = this.route.snapshot.firstChild;
      if (firstChild) {
        return {
          projectName: decodeURIComponent(firstChild.params.project),
          resourcePath: decodeURIComponent(firstChild.params.resource)
        };
      }
      return {
        projectName: '',
        resourcePath: ''
      };
    }),
    distinctUntilChanged(
      (a: ResourceTarget, b: ResourceTarget) =>
        a.projectName === b.projectName && a.resourcePath === b.resourcePath
    )
  );

  private projectsub: Subscription;
  private resourceTasksSubject = new ReplaySubject<TaskCollections<ResourceTarget>>(1);
  readonly resourceTasks$ = this.resourceTasksSubject.asObservable();

  constructor(
    private readonly route: ActivatedRoute,
    private readonly router: Router,
    public metadataService: ProjectMetadataService
  ) {}

  ngOnInit() {
    console.log('++ ResourcesComponent.ngOnInit'); // TESTING

    const projects$ = this.metadataService.prepare(this.route);
    this.projectsub = combineLatest(projects$, this.selectedResource$).pipe(
      map(([projects, resource]) => {
        const metadataArray: Array<ProjectMetadata> = projects.map(
          project => this.metadataService.createMetadata(project)
        );
        return new ResourceTasks<ProjectMetadata>(this.route.snapshot.params.path, metadataArray, resource, ['templates']);
      })
    ).subscribe((resourceTasks) => {
      resourceTasks.tasksSubject = this.resourceTasksSubject;
    });
  }

  ngOnDestroy() {
    console.log('-- ResourcesComponent.ngOnDestroy'); // TESTING
    if (this.projectsub) {
      this.projectsub.unsubscribe();
    }
  }
}
